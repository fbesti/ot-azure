name: Reusable - Terraform Plan

on: 
  workflow_call:
    inputs:
      CLOUD_ENVIRONMENT:
        description: 'Cloud environment'
        required: true
        type: string
      TF_STATE_RG:
        description: 'Azure Resource Group for Terraform state'
        required: true
        type: string
      TF_STATE_SA:
        description: 'Azure Storage Account for Terraform state'
        required: true
        type: string
      TF_STATE_CONTAINER:
        description: 'Azure Blob Container for Terraform state'
        required: true
        type: string
      TF_STATE_KEY:
        description: 'Azure Blob Storage Key for Terraform state file'
        required: true
        type: string
      PULL_REQUEST_NUMBER:
        description: 'Pull request number'
        required: true
        type: string
      WORKING_DIR:
        description: 'The working directory for Terraform'
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
    outputs:
      plan_changes:
        description: "Indicates if the Terraform plan has changes"
        value: ${{ jobs.terraform_plan.outputs.plan_changes }}

permissions:
  id-token: write
  contents: read
  actions: read

concurrency:
  group: storage-access-${{ inputs.TF_STATE_SA }}
  cancel-in-progress: false

jobs:
  terraform_plan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: ${{ inputs.CLOUD_ENVIRONMENT }}
    outputs:
      plan_changes: ${{ steps.plan.outputs.plan_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.9.8
          terraform_wrapper: false

      - name: Azure Login using OIDC
        uses: azure/login@v2.2.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Azure Environment Variables for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "TF_VAR_remote_state_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_remote_state_tenant_id=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Terraform Format Check
        working-directory: ${{ inputs.WORKING_DIR }}
        timeout-minutes: 5
        run: |
          echo "Running terraform format check on ${{ inputs.WORKING_DIR }}"
          terraform fmt -check -diff
          echo "All files are properly formatted."

      - name: Get Runner IP Address with Retry
        id: get_ip
        run: |
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempt $((RETRY_COUNT + 1)) to get runner IP address..."
            RUNNER_IP=$(curl -s --connect-timeout 10 --max-time 30 https://api.ipify.org 2>/dev/null || true)
            
            if [[ "$RUNNER_IP" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
              echo "Successfully retrieved IP: $RUNNER_IP"
              echo "runner_ip=$RUNNER_IP" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              SLEEP_TIME=$((2 ** RETRY_COUNT))
              echo "Failed to get valid IP address. Retrying in ${SLEEP_TIME} seconds..."
              sleep $SLEEP_TIME
            fi
          done
          
          echo "ERROR: Failed to retrieve runner IP address after $MAX_RETRIES attempts"
          exit 1

      - name: Add Firewall Rule to Storage Account
        run: |
          echo "Adding firewall rule for IP: ${{ steps.get_ip.outputs.runner_ip }}"
          
          # Add the firewall rule with error handling
          if ! az storage account network-rule add \
            --account-name ${{ inputs.TF_STATE_SA }} \
            --resource-group ${{ inputs.TF_STATE_RG }} \
            --ip-address ${{ steps.get_ip.outputs.runner_ip }} \
            --output none; then
            echo "ERROR: Failed to add firewall rule"
            exit 1
          fi
          
          echo "Firewall rule added successfully. Waiting for propagation and verifying..."
          
          # Wait and verify the rule exists with retries
          MAX_VERIFY_RETRIES=12
          VERIFY_COUNT=0
          
          while [ $VERIFY_COUNT -lt $MAX_VERIFY_RETRIES ]; do
            sleep 10
            
            if az storage account network-rule list \
              --account-name ${{ inputs.TF_STATE_SA }} \
              --resource-group ${{ inputs.TF_STATE_RG }} \
              --query "ipRules[?ipAddressOrRange=='${{ steps.get_ip.outputs.runner_ip }}']" \
              --output tsv | grep -q "${{ steps.get_ip.outputs.runner_ip }}"; then
              echo "Firewall rule verified and active"
              exit 0
            fi
            
            VERIFY_COUNT=$((VERIFY_COUNT + 1))
            echo "Attempt $((VERIFY_COUNT)) - Firewall rule not yet active, waiting..."
          done
          
          echo "WARNING: Firewall rule may not be fully propagated, but continuing..."

      - name: Terraform Initialize
        working-directory: ${{ inputs.WORKING_DIR }}
        timeout-minutes: 10
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ inputs.TF_STATE_RG }}" \
            -backend-config="storage_account_name=${{ inputs.TF_STATE_SA }}" \
            -backend-config="container_name=${{ inputs.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ inputs.TF_STATE_KEY }}"

      - name: Terraform Validate
        working-directory: ${{ inputs.WORKING_DIR }}
        timeout-minutes: 5
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ inputs.WORKING_DIR }}
        timeout-minutes: 15
        run: |
          echo "Running terraform plan on ${{ inputs.WORKING_DIR }}"
          terraform plan -out=tfplan -detailed-exitcode || exit_code=$?
          if [ $exit_code -eq 1 ]; then
            echo "Terraform plan failed"
            exit 1
          elif [ $exit_code -eq 2 ]; then
            echo "Terraform plan succeeded with changes"
            echo "PLAN_CHANGES=true" >> $GITHUB_ENV
            echo "plan_changes=true" >> $GITHUB_OUTPUT
          else
            echo "Terraform plan succeeded with no changes"
            echo "PLAN_CHANGES=false" >> $GITHUB_ENV
            echo "plan_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Save Plan Output
        if: env.PLAN_CHANGES == 'true'
        working-directory: ${{ inputs.WORKING_DIR }}
        run: |
          echo "Generating plan output for summary..."
          
          # Generate plan output with error handling
          if terraform show -no-color tfplan > plan_output.txt 2>&1; then
            echo "Plan output generated successfully"
            
            # Check file size and truncate if necessary (GitHub summary limit ~65KB)
            PLAN_SIZE=$(wc -c < plan_output.txt)
            echo "Plan output size: $PLAN_SIZE bytes"
            
            if [ $PLAN_SIZE -gt 50000 ]; then
              echo "Plan output too large, truncating..."
              head -c 45000 plan_output.txt > plan_output_truncated.txt
              echo "" >> plan_output_truncated.txt
              echo "... [Output truncated - full plan available in artifact]" >> plan_output_truncated.txt
              cp plan_output_truncated.txt plan_output.txt
            fi
            
            # Write to step summary with proper markdown
            {
              echo "## Terraform Plan Output"
              echo ""
              echo '```hcl'
              cat plan_output.txt
              echo '```'
              echo ""
              echo "📋 Full plan file available in workflow artifacts as \`terraform-plan-${{ inputs.PULL_REQUEST_NUMBER }}\`"
            } >> $GITHUB_STEP_SUMMARY
            
            echo "Plan output added to step summary"
          else
            echo "ERROR: Failed to generate plan output"
            echo "## Terraform Plan Output" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ Failed to generate plan output. Check workflow logs for details." >> $GITHUB_STEP_SUMMARY
            cat plan_output.txt >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Plan Artifact
        if: env.PLAN_CHANGES == 'true'
        uses: actions/upload-artifact@v4.4.3
        with:
          name: terraform-plan-${{ inputs.PULL_REQUEST_NUMBER }}
          path: ${{ inputs.WORKING_DIR }}/tfplan
          retention-days: 7

      - name: Remove Firewall Rule from Storage Account
        if: always() && steps.get_ip.outputs.runner_ip != ''
        run: |
          echo "Removing firewall rule for IP: ${{ steps.get_ip.outputs.runner_ip }}"
          
          # Check if the rule exists before attempting removal
          if az storage account network-rule list \
            --account-name ${{ inputs.TF_STATE_SA }} \
            --resource-group ${{ inputs.TF_STATE_RG }} \
            --query "ipRules[?ipAddressOrRange=='${{ steps.get_ip.outputs.runner_ip }}']" \
            --output tsv | grep -q "${{ steps.get_ip.outputs.runner_ip }}"; then
            
            echo "Firewall rule found, removing..."
            if az storage account network-rule remove \
              --account-name ${{ inputs.TF_STATE_SA }} \
              --resource-group ${{ inputs.TF_STATE_RG }} \
              --ip-address ${{ steps.get_ip.outputs.runner_ip }} \
              --output none; then
              echo "Firewall rule removed successfully"
            else
              echo "WARNING: Failed to remove firewall rule, but continuing..."
            fi
          else
            echo "No firewall rule found for this IP, skipping removal"
          fi

