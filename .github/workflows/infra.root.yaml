name: Azure Open Tofu State Setup
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
  workflow_dispatch:

# Configure OIDC permissions
permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  setup_opentofu_backend:
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_STATE_RG: ${{ vars.TF_STATE_RG }}
      TF_STATE_SA: ${{ vars.TF_STATE_SA }}
      TF_STATE_CONTAINER: ${{ vars.TF_STATE_CONTAINER }}
      TF_STATE_KEY: ${{ vars.TF_STATE_KEY }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      AZURE_SA_SKU: ${{ vars.AZURE_SA_SKU }}
      AZURE_SA_KIND: ${{ vars.AZURE_SA_KIND }}
      AZURE_SA_TIER: ${{ vars.AZURE_SA_TIER }}
      WORKING_DIR: ./infrastructure/azure
    outputs:
      tf_state_rg: ${{ env.TF_STATE_RG }}
      tf_state_sa: ${{ env.TF_STATE_SA }}
      tf_state_container: ${{ env.TF_STATE_CONTAINER }}
      tf_state_key: ${{ vars.TF_STATE_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Azure Environment Variables for OpenTofu
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV

      - name: Check if Resource Group exists
        id: check_rg
        run: |
          if az group show --name ${{ env.TF_STATE_RG }} --output none 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Resource Group
        if: steps.check_rg.outputs.exists == 'false'
        run: |
          az group create \
            --name ${{ env.TF_STATE_RG }} \
            --location ${{ env.AZURE_LOCATION }}

      - name: Check if Storage Account exists
        id: check_sa
        run: |
          if az storage account show --name ${{ env.TF_STATE_SA }} --resource-group ${{ env.TF_STATE_RG }} --output none 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Storage Account
        if: steps.check_sa.outputs.exists == 'false'
        run: |
          az storage account create \
            --name ${{ env.TF_STATE_SA }} \
            --resource-group ${{ env.TF_STATE_RG }} \
            --location ${{ env.AZURE_LOCATION }} \
            --sku ${{ env.AZURE_SA_SKU }} \
            --kind ${{ env.AZURE_SA_KIND }} \
            --access-tier ${{ env.AZURE_SA_TIER }} \
            --allow-blob-public-access false \
            --min-tls-version TLS1_2

      - name: Enable versioning on Storage Account
        run: |
          az storage account blob-service-properties update \
            --account-name ${{ env.TF_STATE_SA }} \
            --resource-group ${{ env.TF_STATE_RG }} \
            --enable-versioning true

      - name: Check if Container exists
        id: check_container
        run: |
          if az storage container show --name ${{ env.TF_STATE_CONTAINER }} --account-name ${{ env.TF_STATE_SA }} --output none 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Storage Container
        if: steps.check_container.outputs.exists == 'false'
        run: |
          az storage container create \
            --name ${{ env.TF_STATE_CONTAINER }} \
            --account-name ${{ env.TF_STATE_SA }} \
            --auth-mode login


  opentofu_plan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: setup_opentofu_backend
    environment: production
    env:
      WORKING_DIR: ./infrastructure
    outputs:
      plan_changes: ${{ steps.plan.outputs.plan_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: latest
          tofu_wrapper: false

      - name: Azure Login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Azure Environment Variables for OpenTofu
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "TF_VAR_remote_state_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_remote_state_tenant_id=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: OpenTofu Format Check
        working-directory: ${{ env.WORKING_DIR }}
        run: tofu fmt -check -recursive

      - name: OpenTofu Initialize
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          tofu init \
            -backend-config="resource_group_name=${{ vars.TF_STATE_RG }}" \
            -backend-config="storage_account_name=${{ vars.TF_STATE_SA }}" \
            -backend-config="container_name=${{ vars.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY }}"

      - name: OpenTofu Validate
        working-directory: ${{ env.WORKING_DIR }}
        run: tofu validate

      - name: OpenTofu Plan
        id: plan
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          tofu plan -out=tfplan -detailed-exitcode || exit_code=$?
          if [ $exit_code -eq 1 ]; then
            echo "OpenTofu plan failed"
            exit 1
          elif [ $exit_code -eq 2 ]; then
            echo "OpenTofu plan succeeded with changes"
            echo "PLAN_CHANGES=true" >> $GITHUB_ENV
            echo "plan_changes=true" >> $GITHUB_OUTPUT
          else
            echo "OpenTofu plan succeeded with no changes"
            echo "PLAN_CHANGES=false" >> $GITHUB_ENV
            echo "plan_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Save Plan Output
        if: env.PLAN_CHANGES == 'true'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          tofu show -no-color tfplan > plan_output.txt
          echo "## OpenTofu Plan Output" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat plan_output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload Plan Artifact
        if: env.PLAN_CHANGES == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: opentofu-plan-${{ github.event.pull_request.number }}
          path: |
            ${{ env.WORKING_DIR }}/tfplan
            ${{ env.WORKING_DIR }}/plan_output.txt
          retention-days: 7


  opentofu_apply:
    name: OpenTofu Apply
    runs-on: ubuntu-latest
    needs: setup_opentofu_backend
    environment: production
    env:
      WORKING_DIR: ./infrastructure
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: latest
          tofu_wrapper: false

      - name: Azure Login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Azure Environment Variables for OpenTofu
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "TF_VAR_remote_state_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_remote_state_tenant_id=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Find PR number from merge commit
        id: find_pr
        run: |
          pr_number=$(echo "${{ github.event.head_commit.message }}" | grep -oP '(?<=Merge pull request #)\d+')
          if [ -z "$pr_number" ]; then
            echo "Could not determine PR number from commit message."
            echo "found_pr=false" >> $GITHUB_OUTPUT
          else
            echo "Found PR number: $pr_number"
            echo "found_pr=true" >> $GITHUB_OUTPUT
            echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Download Plan Artifact
        if: steps.find_pr.outputs.found_pr == 'true'
        uses: dawidd6/action-download-artifact@v3
        with:
          name: opentofu-plan-${{ steps.find_pr.outputs.pr_number }}
          path: ${{ env.WORKING_DIR }}
          workflow: ${{ github.workflow_id }}
          pr: ${{ steps.find_pr.outputs.pr_number }}
          workflow_conclusion: success

      - name: OpenTofu Initialize
        if: steps.find_pr.outputs.found_pr == 'true'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          tofu init \
            -backend-config="resource_group_name=${{ vars.TF_STATE_RG }}" \
            -backend-config="storage_account_name=${{ vars.TF_STATE_SA }}" \
            -backend-config="container_name=${{ vars.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY }}"

      - name: OpenTofu Apply
        if: steps.find_pr.outputs.found_pr == 'true'
        working-directory: ${{ env.WORKING_DIR }}
        run: tofu apply -auto-approve tfplan

            