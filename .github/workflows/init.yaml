name: Azure Terraform State Setup
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  TF_STATE_RG: rg-terraform-states-prod
  TF_STATE_SA: stopentofustatesprodfbesti8106
  TF_STATE_CONTAINER: tfstate
  AZURE_LOCATION: northeurope
  AZURE_SA_SKU: Standard_LRS # Cheapest option for StorageV2
  AZURE_SA_KIND: StorageV2
  AZURE_SA_TIER: Hot # Hot tier is suitable for active Terraform state

# Configure OIDC permissions
permissions:
  id-token: write
  contents: read

jobs:
  setup_terraform_backend:
    runs-on: ubuntu-latest
    environment: production # Or a suitable environment name if you have them configured
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Check if Resource Group exists
        id: check_rg
        run: |
          if az group show --name ${{ env.TF_STATE_RG }} --output none 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Resource Group
        if: steps.check_rg.outputs.exists == 'false'
        run: |
          az group create \
            --name ${{ env.TF_STATE_RG }} \
            --location ${{ env.AZURE_LOCATION }}

      - name: Check if Storage Account exists
        id: check_sa
        run: |
          if az storage account show --name ${{ env.TF_STATE_SA }} --resource-group ${{ env.TF_STATE_RG }} --output none 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Storage Account
        if: steps.check_sa.outputs.exists == 'false'
        run: |
          az storage account create \
            --name ${{ env.TF_STATE_SA }} \
            --resource-group ${{ env.TF_STATE_RG }} \
            --location ${{ env.AZURE_LOCATION }} \
            --sku ${{ env.AZURE_SA_SKU }} \
            --kind ${{ env.AZURE_SA_KIND }} \
            --access-tier ${{ env.AZURE_SA_TIER }} \
            --allow-blob-public-access false \
            --min-tls-version TLS1_2

      - name: Enable versioning on Storage Account
        run: |
          az storage account blob-service-properties update \
            --account-name ${{ env.TF_STATE_SA }} \
            --resource-group ${{ env.TF_STATE_RG }} \
            --enable-versioning true

      - name: Check if Container exists
        id: check_container
        run: |
          if az storage container show --name ${{ env.TF_STATE_CONTAINER }} --account-name ${{ env.TF_STATE_SA }} --output none 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Storage Container
        if: steps.check_container.outputs.exists == 'false'
        run: |
          az storage container create \
            --name ${{ env.TF_STATE_CONTAINER }} \
            --account-name ${{ env.TF_STATE_SA }} \
            --auth-mode login

      - name: Display Backend Configuration
        run: |
          echo "Terraform backend configuration:"
          echo "================================"
          echo "Resource Group: ${{ env.TF_STATE_RG }}"
          echo "Storage Account: ${{ env.TF_STATE_SA }}"
          echo "Container: ${{ env.TF_STATE_CONTAINER }}"
          echo ""
          echo "Add this to your Terraform configuration:"
          echo "terraform {"
          echo "  backend \"azurerm\" {"
          echo "    resource_group_name  = \"${{ env.TF_STATE_RG }}\""
          echo "    storage_account_name = \"${{ env.TF_STATE_SA }}\""
          echo "    container_name       = \"${{ env.TF_STATE_CONTAINER }}\""
          echo "    key                  = \"terraform.tfstate\""
          echo "  }"
          echo "}"